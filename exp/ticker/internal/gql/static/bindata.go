// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html
// schema.gql

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGraphiqlhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76" +
		"\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91" +
		"\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8" +
		"\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a" +
		"\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26" +
		"\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d" +
		"\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1" +
		"\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e" +
		"\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5" +
		"\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3" +
		"\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5" +
		"\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5" +
		"\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a" +
		"\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d" +
		"\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad" +
		"\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa" +
		"\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f" +
		"\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f" +
		"\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func bindataGraphiqlhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphiqlhtml,
		"graphiql.html",
	)
}

func bindataGraphiqlhtml() (*asset, error) {
	bytes, err := bindataGraphiqlhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "graphiql.html",
		size:        1182,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556024751, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xc1\x6e\xdb\x38\x10\x3d\x4b\x5f\x31\x41\x2e\xc9\xc5\x87\xc5\x9e" +
		"\x84\xdd\x05\xec\x64\x17\x6b\x34\x09\xda\x38\x29\x0a\x04\x45\x31\x16\x47\x12\x11\x8a\x54\x86\xa4\x1d\xa3\xc8\xbf" +
		"\x17\xa4\x6c\x87\xb2\x5c\xf7\xda\x93\xc8\x37\xf3\x86\x33\x8f\x8f\xb2\x65\x43\x2d\xc2\xf7\x3c\x7b\xf1\xc4\x9b\x02" +
		"\xb2\x4f\xe1\x9b\xbf\xe5\xb9\xdb\x74\x04\x71\x17\xc2\xe7\xc0\xe4\x58\xd2\x8a\x00\x95\x82\x15\x2a\x29\xd0\x91\x00" +
		"\xb4\x96\x9c\x05\xa3\xc1\x35\x04\x0b\x47\x4a\x21\x83\x26\xb7\x36\xfc\x3c\xc9\xb3\x3e\x5e\xc0\xd3\x34\x2c\xbe\x9e" +
		"\xe5\x27\x6a\x49\x6b\x3d\xf1\x89\x62\xdb\x84\x02\x9e\xe6\x71\x75\x58\xce\x31\x0a\x02\xeb\xd0\x59\xa8\xd8\xb4\xb1" +
		"\x8c\x42\xeb\xe0\x2f\xed\xdb\xff\x8d\x67\x3b\xad\xcd\x3f\xd0\x84\x55\x60\x5e\x08\xaa\xd0\x2b\x07\x7f\xc3\x1f\x7f" +
		"\xf6\xf0\xe5\x04\x4c\xe7\xa4\xd1\xa8\xd4\x06\x3a\x36\x2b\x29\x08\x4a\xe3\xb5\x23\x06\xd4\x22\xf0\x96\x68\xa9\x1f" +
		"\x1d\xa4\xae\x0c\x54\x86\xa1\x92\xca\x11\x4b\x5d\x4f\xf2\xac\x45\x7e\x26\x67\x2f\xf2\x2c\x0b\xa9\x71\xf6\x2b\x23" +
		"\xa8\x80\x85\x0b\x29\x29\xde\x8f\x92\x44\xb6\x67\x1d\x23\xa5\xa1\x11\x2f\x19\xb1\x80\xb9\x76\x79\x76\x59\xc0\xd3" +
		"\x6d\x6c\x65\x24\x7c\x5d\x33\xd5\x51\xf5\x81\x68\x86\x7f\xa2\x59\x60\x47\x7d\x8e\xca\x13\x38\x1a\x5b\x02\x53\xc5" +
		"\x75\x5f\xb3\x43\xc9\x70\x41\x93\xa0\xc8\x39\x7c\xb9\xb9\xfd\x36\x7b\xb8\xba\x1c\x8a\x05\x4c\xd6\x2b\x67\x27\x79" +
		"\xe6\x64\xf9\x4c\x1c\x34\x0b\xc4\x3b\x6c\xe9\x97\xc3\x4d\xf7\x63\xec\xc7\x7c\xcb\x73\x5b\x62\xf0\xcd\x4c\xd6\x21" +
		"\xb1\x77\x72\x94\x2c\x38\xb9\x4c\x14\x3d\xdb\x59\x6a\x5a\x46\x65\x13\x3c\x90\x92\xad\xf6\xed\x36\xc7\xc6\xe3\xcf" +
		"\xf2\x0c\xbd\x6b\xee\xe9\xc5\x4b\x26\x51\xc0\xcc\x18\x45\xa8\xf7\xf8\xca\x94\xb8\x54\x34\x08\xb4\xfd\x19\xff\x29" +
		"\x83\xb1\x40\x7f\xc1\xda\xb1\x51\x8a\xc4\x6c\x73\x6d\x5a\x94\x7a\x40\xd1\x65\x63\xc6\x4e\x18\x46\x1e\x86\xad\x4a" +
		"\x1b\xd1\x69\x4c\x18\xb6\x26\xa4\xed\x14\x6e\xae\xa9\x94\x2d\x2a\x5b\x6c\x25\x0a\xf3\x25\x6a\x87\x44\xb2\x65\xb2" +
		"\x2d\x8d\x16\x32\x5c\xba\x4d\xc0\x4a\xbe\x92\xb8\xf3\xed\x32\x98\x70\x5f\xa8\xc5\xd7\x11\x26\xed\xa3\x56\xb2\x95" +
		"\x6e\xd8\x0d\x93\xa0\x36\x7a\x69\xae\xad\x63\x5f\x1e\x9e\x50\x1a\xa5\xd0\x11\xa3\x9a\x0a\xc1\x64\x2d\x9d\x8c\x2e" +
		"\x64\xad\xd1\x79\x3e\xc8\xf2\x3a\x78\x3e\xc5\x82\xd7\xbd\x1d\x99\x60\x7e\xbd\xbd\xda\xdd\xdf\xaf\xf7\x54\x30\x4d" +
		"\xf4\xf3\x47\x94\x9c\x90\x8e\x3e\xec\x14\x1f\x3e\xd0\x5d\x2f\x47\x1e\xf6\x41\x68\xc4\x0b\x15\x3f\x1b\xe5\xc3\x15" +
		"\xed\xcc\xb3\x25\x1c\xc2\xb1\xd1\xab\xde\x67\xbd\xf8\xa6\x23\xfd\x1e\x57\x66\xfd\xbe\x69\x64\xdd\x24\x15\x1b\xd4" +
		"\x75\x7a\x82\x32\xf6\x7d\xbb\xd3\xe4\xf0\xc5\x9d\x52\xe7\x77\xe9\xb9\x17\x34\x74\xda\xf9\xa5\x92\xe5\x07\xda\xa4" +
		"\x4f\x7b\x68\x7d\xcf\x2a\xfd\x0d\x98\x56\x3d\xde\xdf\xa4\xb6\x27\x41\x8c\xc1\xaa\x0b\xe2\xd5\xe0\x9e\xc2\xcb\x1f" +
		"\x81\x8e\x51\xdb\x8a\x78\x14\x58\xd3\x72\xea\x5d\xf3\xaf\x16\x9d\x91\x83\x7f\x8f\xa0\xce\x58\xe9\x46\x0c\xc3\xf5" +
		"\xc3\x5a\x3a\x97\x82\x6f\xf9\x8f\x00\x00\x00\xff\xff\x15\x5b\xba\xd6\xc4\x07\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        1988,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555959706, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": bindataGraphiqlhtml,
	"schema.gql":    bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"graphiql.html": {Func: bindataGraphiqlhtml, Children: map[string]*bintree{}},
	"schema.gql":    {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
