// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html
// schema.gql

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGraphiqlhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76" +
		"\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91" +
		"\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8" +
		"\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a" +
		"\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26" +
		"\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d" +
		"\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1" +
		"\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e" +
		"\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5" +
		"\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3" +
		"\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5" +
		"\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5" +
		"\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a" +
		"\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d" +
		"\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad" +
		"\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa" +
		"\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f" +
		"\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f" +
		"\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func bindataGraphiqlhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphiqlhtml,
		"graphiql.html",
	)
}

func bindataGraphiqlhtml() (*asset, error) {
	bytes, err := bindataGraphiqlhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "graphiql.html",
		size:        1182,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556024751, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x46\x2e\xc9\xc5\x87\xa2\x27" +
		"\xa1\x2d\x60\x27\x2d\x6a\x34\x09\xda\x38\x29\x16\x08\x16\x8b\xb1\x38\x92\x88\x50\xa4\x32\x24\xed\x18\x8b\xfc\xfb" +
		"\x82\x94\xed\x50\x96\xd7\x7b\xdd\x93\xc8\x37\xf3\x86\x33\x8f\x8f\xb2\x65\x43\x2d\xc2\xd7\x3c\x7b\xf5\xc4\xdb\x02" +
		"\xb2\xff\xc2\x37\x7f\xcf\x73\xb7\xed\x08\xe2\x2e\x84\x2f\x80\xc9\xb1\xa4\x35\x01\x2a\x05\x6b\x54\x52\xa0\x23\x01" +
		"\x68\x2d\x39\x0b\x46\x83\x6b\x08\x96\x8e\x94\x42\x06\x4d\x6e\x63\xf8\x65\x9a\x67\x7d\xbc\x80\xe7\x59\x58\x4c\x3e" +
		"\x4f\xf2\x33\xc5\xa4\xb5\x9e\xf8\x4c\xb5\x5d\x42\x01\xcf\x8b\xb8\x1a\xd5\x73\x8c\x82\xc0\x3a\x74\x16\x2a\x36\x6d" +
		"\xac\xa3\xd0\x3a\xf8\x4d\xfb\xf6\x6f\xe3\xd9\xce\x6a\xf3\x07\x34\x61\x15\x98\x97\x82\x2a\xf4\xca\xc1\xef\xf0\xcb" +
		"\xaf\x3d\x7c\x35\x05\xd3\x39\x69\x34\x2a\xb5\x85\x8e\xcd\x5a\x0a\x82\xd2\x78\xed\x88\x01\xb5\x08\xbc\x15\x5a\xea" +
		"\x87\x07\xa9\x2b\x03\x95\x61\xa8\xa4\x72\xc4\x52\xd7\xd3\x3c\x6b\x91\x5f\xc8\xd9\xcb\x3c\xcb\x42\x6a\x9c\xfe\xda" +
		"\x08\x2a\x60\xe9\x42\x4a\x8a\xf7\xb3\x24\x91\xdd\x59\xa7\x48\x69\x68\xc4\x4b\x46\x2c\x60\xa1\x5d\x9e\x5d\x15\xf0" +
		"\x7c\x17\x5b\x19\x29\x5f\xd7\x4c\x75\x94\x7d\x20\x9a\xe1\xef\x68\x16\xd8\x51\x9f\x93\xf2\x04\x8e\xc6\x96\xc0\x54" +
		"\x71\xdd\xd7\xec\x50\x32\x5c\xd2\x34\x28\x72\x01\x9f\x6e\xef\xbe\xcc\x1f\xaf\xaf\x86\x62\x01\x93\xf5\xca\xd9\x69" +
		"\x9e\x39\x59\xbe\x10\x07\xcd\x02\xf1\x1e\x5b\xfa\xe1\x70\xb3\xc3\x18\x87\x31\xdf\xf3\xdc\x96\x18\x8c\x33\x97\x75" +
		"\x48\xec\xbd\x1c\x25\x0b\x5e\x2e\x13\x45\x27\x7b\x4f\xcd\xca\xa8\x6c\x82\x07\x52\xb2\xd5\xbe\xdd\xe5\xd8\x78\xfc" +
		"\x24\xcf\xd0\xbb\xe6\x81\x5e\xbd\x64\x12\x05\xcc\x8d\x51\x84\xfa\x80\xaf\x4d\x89\x2b\x45\x83\x40\xdb\x9f\xf1\x97" +
		"\x32\x18\x0b\xf4\x17\xac\x1d\x1b\xa5\x48\xcc\xb7\x37\xa6\x45\xa9\x07\x14\x5d\x36\x66\xec\x84\x61\xe4\x71\xd8\xaa" +
		"\xb4\x11\x9d\xc5\x84\x61\x6b\x42\xda\x4e\xe1\xf6\x86\x4a\xd9\xa2\xb2\xc5\x4e\xa2\x30\x5f\xa2\x76\x48\x24\x5b\x26" +
		"\xdb\xd2\x68\x21\xc3\xa5\xdb\x04\xac\xe4\x1b\x89\x7b\xdf\xae\x82\x09\x0f\x85\x5a\x7c\x1b\x61\xd2\x3e\x69\x25\x5b" +
		"\xe9\x86\xdd\x30\x09\x6a\xa3\x97\x16\xda\x3a\xf6\xe5\xf1\x09\xa5\x51\x0a\x1d\x31\xaa\x99\x10\x4c\xd6\xd2\xd9\xe8" +
		"\x52\xd6\x1a\x9d\xe7\xa3\x2c\xaf\x83\xe7\x53\x2c\x78\xdd\xdb\x91\x09\x16\x37\xbb\xab\xdd\xff\xff\x7a\x4f\x05\xd3" +
		"\x44\x3f\xff\x8b\x92\x13\xd2\xc9\x87\x9d\xe2\xc3\x07\xba\xef\xe5\xc4\xc3\x3e\x0a\x8d\x78\xa1\xe2\xff\x46\xf9\x70" +
		"\x45\x7b\xf3\xec\x08\xc7\x70\x6c\xf4\xba\xf7\x59\x2f\xbe\xe9\x48\x7f\xc4\x95\xd9\x7c\x6c\x1a\x59\x37\x49\xc5\x06" +
		"\x75\x9d\x9e\xa0\x8c\xfd\xd8\xee\x35\x39\x7e\x71\xe7\xd4\xf9\x59\x7a\xee\x05\x0d\x9d\x76\x7e\xa5\x64\xf9\x0f\x6d" +
		"\xd3\xa7\x3d\xb4\xbe\x67\x95\xfe\x06\x4c\xab\x9e\x1e\x6e\x53\xdb\x93\x20\xc6\x60\xd5\x25\xf1\x7a\x70\x4f\xe1\xe5" +
		"\x8f\x40\xc7\xa8\x6d\x45\x3c\x0a\x6c\x68\x35\xf3\xae\xf9\x53\x8b\xce\xc8\xc1\xbf\x47\x50\x67\xac\x74\x23\x86\xe1" +
		"\xfa\x71\x23\x9d\x4b\xc1\xf7\xfc\x5b\x00\x00\x00\xff\xff\x0b\x58\x6c\x32\xc6\x07\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        1990,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556025345, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": bindataGraphiqlhtml,
	"schema.gql":    bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"graphiql.html": {Func: bindataGraphiqlhtml, Children: map[string]*bintree{}},
	"schema.gql":    {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
