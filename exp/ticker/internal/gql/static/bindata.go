// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html
// schema.gql

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGraphiqlhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76" +
		"\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91" +
		"\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8" +
		"\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a" +
		"\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26" +
		"\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d" +
		"\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1" +
		"\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e" +
		"\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5" +
		"\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3" +
		"\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5" +
		"\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5" +
		"\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a" +
		"\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d" +
		"\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad" +
		"\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa" +
		"\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f" +
		"\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f" +
		"\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func bindataGraphiqlhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphiqlhtml,
		"graphiql.html",
	)
}

func bindataGraphiqlhtml() (*asset, error) {
	bytes, err := bindataGraphiqlhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "graphiql.html",
		size:        1182,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556024751, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x82\xbd\x24\x17\x1f\x8a\x9e" +
		"\x84\xb6\x80\x9d\xb4\xa8\xd1\xdd\x45\xbb\xf6\x16\x05\x82\xa2\x18\x8b\x23\x89\x08\x3f\xb4\x43\xd2\x5e\xa3\xc8\x7f" +
		"\x2f\x48\xc9\x0e\x65\xb9\xee\xb5\x27\x69\x3e\xde\x70\xe6\xf1\x0d\x5d\xdd\x91\x46\xf8\xbb\x2c\xbe\x04\xe2\x63\x05" +
		"\xc5\x6f\xf1\x5b\xbe\x96\xa5\x3f\xf6\x04\xc9\x8a\xe1\x77\xc0\xe4\x59\xd2\x9e\x00\x95\x82\x3d\x2a\x29\xd0\x93\x00" +
		"\x74\x8e\xbc\x03\x6b\xc0\x77\x04\x1b\x4f\x4a\x21\x83\x21\x7f\xb0\xfc\xb2\x28\x8b\x21\x5e\xc1\xf3\x32\xfe\xdc\xfd" +
		"\x79\x57\xde\x28\x26\x9d\x0b\xc4\x37\xaa\x8d\x09\x15\x3c\xaf\xd3\xdf\xac\x9e\x67\x14\x04\xce\xa3\x77\xd0\xb0\xd5" +
		"\xa9\x8e\x42\xe7\xe1\x3b\x13\xf4\xcf\x36\xb0\x5b\xb6\xf6\x07\xe8\xe2\x5f\x44\xde\x0b\x6a\x30\x28\x0f\xdf\xc3\x37" +
		"\xdf\x0e\xee\x87\x05\xd8\xde\x4b\x6b\x50\xa9\x23\xf4\x6c\xf7\x52\x10\xd4\x36\x18\x4f\x0c\x68\x44\xc4\xed\xd0\xd1" +
		"\x30\x3c\x48\xd3\x58\x68\x2c\x43\x23\x95\x27\x96\xa6\x5d\x94\x85\x46\x7e\x21\xef\xee\xcb\xa2\x88\xa9\x69\xfa\x47" +
		"\x2b\xa8\x82\x8d\x8f\x29\xb9\x7f\x98\x25\x8b\x8c\x67\x5d\x03\xe5\xa1\x19\x2e\x1b\xb1\x82\xb5\xf1\x65\xf1\x50\xc1" +
		"\xf3\x87\xd4\xca\x8c\xf9\xb6\x65\x6a\x13\xed\x13\xd2\x2c\xff\x0b\x67\x11\x9d\xf8\xb9\x4a\x4f\xc4\x18\xd4\x04\xb6" +
		"\x49\xff\x43\xcd\x1e\x25\xc3\x3d\x2d\x22\x23\xef\xe0\x8f\xf7\x1f\xfe\x5a\x6d\x1f\x1f\xa6\x64\x01\x93\x0b\xca\xbb" +
		"\x45\x59\x78\x59\xbf\x10\x47\xce\x22\xf0\x23\x6a\xfa\xcf\xe1\x96\xe7\x31\xce\x63\xbe\x96\xa5\xab\x31\x0a\x67\x25" +
		"\xdb\x98\x38\x5a\x5b\xa9\x69\xd4\x75\xa2\x2f\xea\xba\xce\xd8\xbd\x3b\xe9\x6b\x59\x27\x96\x33\x7f\x04\x65\xa6\x09" +
		"\x7a\xcc\x71\xa9\x95\xbb\xb2\xc0\xe0\xbb\x4f\xf4\x25\x48\x26\x51\xc1\xca\x5a\x45\x68\xce\xfe\xbd\xad\x71\xa7\x68" +
		"\x12\xd0\xc3\x19\x3f\x29\x8b\xa9\xc0\x70\xd9\xc6\xb3\x55\x8a\xc4\xea\xf8\x64\x35\x4a\x33\x81\x98\xba\xb3\x73\x55" +
		"\x4c\x23\xdb\x69\xab\xd2\x25\xef\x32\x25\x4c\x5b\x13\xd2\xf5\x0a\x8f\x4f\x54\x4b\x8d\xca\x55\x23\x5d\x71\xbe\x8c" +
		"\xf9\x98\x48\xae\xce\xcc\xda\x1a\x21\xa3\x00\x5c\xe6\x6c\xe4\x57\x12\x1f\x83\xde\x45\x41\x9e\x0b\x69\xfc\x3a\xf3" +
		"\x49\xf7\xd9\x28\xa9\xa5\x9f\x76\xc3\x24\x48\x27\x5d\xad\x8d\xf3\x1c\xea\xcb\x13\x6a\xab\x14\x7a\x62\x54\x4b\x21" +
		"\x98\x9c\xa3\x9b\xd1\x8d\x6c\x0d\xfa\xc0\x17\x59\xc1\x44\xfd\xe7\xbe\xa8\xfb\xe0\x66\x22\x58\x3f\x8d\x57\x7b\x7a" +
		"\x0b\x07\x7d\x45\xd1\x24\x6d\xff\x8a\x92\x33\xd0\xd5\x25\xcf\xfd\xd3\x65\x3d\xf5\x72\x65\xc9\x2f\x42\x33\x5c\xac" +
		"\xf8\xbb\x55\x21\x5e\xd1\x49\x3c\x23\xe0\xd2\x9d\x1a\x7d\x1c\x74\x36\x90\x6f\x7b\x32\x6f\x71\x65\x0f\x6f\x46\x27" +
		"\xdb\x2e\xab\xd8\xa1\x69\xf3\x13\x94\x75\x99\xe9\xa4\xa9\xa9\x4a\x2b\xf5\xc6\xd0\xe5\x2e\xde\xe2\xea\xff\x39\xc1" +
		"\x40\x76\xec\xbb\x0f\x3b\x25\xeb\x5f\xe8\x98\xaf\xfd\x74\x2d\x02\xab\xfc\x89\xb0\x5a\x7d\xfe\xf4\x3e\x5f\x09\x12" +
		"\xc4\x18\x65\xbc\x21\xde\x4f\xee\x30\xbe\x0a\x33\xa7\x67\x34\xae\x21\x9e\x05\x0e\xb4\x5b\x06\xdf\xfd\x68\x44\x6f" +
		"\xe5\xe4\x5d\x12\xd4\x5b\x27\xfd\x0c\x61\xb9\xdd\x1e\xa4\xf7\xb9\xf3\xb5\xfc\x27\x00\x00\xff\xff\x62\x5a\x56\xc8" +
		"\xee\x07\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        2030,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556025878, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": bindataGraphiqlhtml,
	"schema.gql":    bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"graphiql.html": {Func: bindataGraphiqlhtml, Children: map[string]*bintree{}},
	"schema.gql":    {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
