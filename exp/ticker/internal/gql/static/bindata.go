// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html
// schema.gql

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGraphiqlhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76" +
		"\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91" +
		"\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8" +
		"\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a" +
		"\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26" +
		"\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d" +
		"\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1" +
		"\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e" +
		"\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5" +
		"\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3" +
		"\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5" +
		"\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5" +
		"\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a" +
		"\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d" +
		"\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad" +
		"\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa" +
		"\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f" +
		"\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f" +
		"\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func bindataGraphiqlhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphiqlhtml,
		"graphiql.html",
	)
}

func bindataGraphiqlhtml() (*asset, error) {
	bytes, err := bindataGraphiqlhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "graphiql.html",
		size:        1182,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556057220, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x82\xbd\x24\x40\x90\x43\xd1" +
		"\x93\xd0\x16\xb0\x93\x16\x0d\x9a\x6c\xb7\xeb\x6c\x51\x20\x28\x8a\xb1\x38\x96\x08\x53\xa4\x76\x38\xb4\xd7\x58\xe4" +
		"\xbf\x17\xa4\xe4\x84\xb2\xd2\xf4\xbe\x27\x89\x6f\x3e\x38\xf3\xf8\x66\x7c\xdd\x52\x87\xf0\xb5\x2c\x3e\x07\xe2\x43" +
		"\x05\xc5\x1f\xf1\x5b\x3e\x95\xa5\x1c\x7a\x82\x74\x8a\xe6\x77\xc0\x24\xac\x69\x47\x80\xc6\xc0\x0e\x8d\x56\x28\xa4" +
		"\x00\xbd\x27\xf1\xe0\x2c\x48\x4b\xb0\x12\x32\x06\x19\x2c\xc9\xde\xf1\xf6\xaa\x2c\x06\x7b\x05\x8f\x8b\xf8\x73\xf6" +
		"\xf7\x59\xf9\x46\x32\xed\x7d\x20\x7e\x23\xdb\xe8\x50\xc1\xe3\x6d\xfa\x9b\xe5\x13\x46\x45\xe0\x05\xc5\xc3\x86\x5d" +
		"\x97\xf2\x18\xf4\x02\x3f\xd8\xd0\xfd\xea\x02\xfb\x45\xe3\x7e\x82\x36\xfe\xc5\xc8\x73\x45\x1b\x0c\x46\xe0\x47\xf8" +
		"\xee\xfb\x01\xbe\xb8\x02\xd7\x8b\x76\x16\x8d\x39\x40\xcf\x6e\xa7\x15\x41\xed\x82\x15\x62\x40\xab\x62\xdc\x1a\x3d" +
		"\x0d\xcd\x83\xb6\x1b\x07\x1b\xc7\xb0\xd1\x46\x88\xb5\x6d\xae\xca\xa2\x43\xde\x92\xf8\xf3\xb2\x28\xa2\x6b\xea\xfe" +
		"\xda\x29\xaa\x60\x25\xd1\x25\xc7\x87\x5e\x32\xcb\x78\xd7\x6b\x41\xb9\x69\x16\x97\xb5\x58\xc1\xad\x95\xb2\xb8\xa8" +
		"\xe0\xf1\x3e\x95\x32\x63\xbe\x69\x98\x9a\x44\xfb\x84\x34\xc7\xff\xc1\x59\x8c\x4e\xfc\xbc\x4a\x4f\x8c\xb1\xd8\x11" +
		"\xb8\x4d\xfa\x1f\x72\xf6\xa8\x19\xce\xe9\x2a\x32\xf2\x0e\xfe\xba\xbb\xff\x67\xf9\x70\x7d\x31\x25\x0b\x98\x7c\x30" +
		"\xe2\xaf\xca\x42\x74\xbd\x25\x8e\x9c\xc5\xc0\xf7\xd8\xd1\xff\x36\xb7\x78\x6e\xe3\xb9\xcd\xa7\xb2\xf4\x35\x46\xe1" +
		"\x2c\x75\x13\x1d\xc7\xd3\x83\xee\x68\xd4\x75\xa2\x2f\xea\xba\xce\xd8\x3d\x3b\xea\x6b\x51\x27\x96\x33\x3c\x06\x65" +
		"\x47\x1b\xba\xd1\xc7\xa7\x52\xce\xca\x02\x83\xb4\x1f\xe9\x73\xd0\x4c\xaa\x82\xa5\x73\x86\xd0\x3e\xe3\x3b\x57\xe3" +
		"\xda\xd0\xc4\xd0\x0d\x77\xfc\x62\x1c\xa6\x04\xc3\x63\x5b\x61\x67\x0c\xa9\xe5\xe1\xc6\x75\xa8\xed\x24\xc4\xd6\xad" +
		"\x9b\xab\x62\x6a\x79\x98\x96\xaa\x7d\x42\x17\xc9\x61\x5a\x9a\xd2\xbe\x37\x78\xb8\xa1\x5a\x77\x68\x7c\x35\xd2\x15" +
		"\xfb\xcb\x98\x8f\x8e\xe4\xeb\xec\x58\x3b\xab\x74\x14\x80\xcf\xc0\x8d\xfe\x42\xea\x7d\xe8\xd6\x51\x90\xcf\x89\x3a" +
		"\xfc\x32\xc3\xb4\xff\x64\x8d\xee\xb4\x4c\xab\x61\x52\xd4\x25\x5d\xdd\x5a\x2f\x1c\xea\xd3\x1b\x6a\x67\x0c\x0a\x31" +
		"\x9a\x85\x52\x4c\xde\xd3\x9b\xd6\x95\x6e\x2c\x4a\xe0\x13\xaf\x60\xa3\xfe\x73\x2c\xea\x3e\xf8\x99\x08\x6e\x6f\xc6" +
		"\xa7\x3d\xee\xc2\x41\x5f\x51\x34\x49\xdb\x1f\x50\x73\x16\xf4\xea\x90\xe7\xf8\x74\x58\x8f\xb5\xbc\x32\xe4\x27\xa6" +
		"\x59\x5c\xcc\xf8\xa7\x33\x21\x3e\xd1\x51\x3c\x63\xc0\x29\x9c\x0a\xbd\x1e\x74\x36\x90\xef\x7a\xb2\x2f\x76\xe3\xf6" +
		"\x2f\x87\x56\x37\x6d\x96\xb1\x45\xdb\xe4\x37\x18\xe7\xb3\xa3\x8e\xd7\xed\xd0\xac\x04\x59\xaa\x34\x5a\x49\x04\xec" +
		"\xe5\x8e\x54\x43\x7c\x1d\xfd\x23\x3c\x1a\x2f\xcb\xc2\xb1\x22\x5e\x3b\xb7\x5d\xc5\x4d\x53\xc1\xef\x93\xf3\x0b\xd1" +
		"\xa7\x23\xfd\x16\xe5\xdf\x34\x11\x53\x1c\xbe\x96\x10\x37\xcf\x52\xab\x97\x59\xbd\x2c\x8b\xb5\x56\xd3\x76\x2f\x87" +
		"\x16\xc8\xcb\x52\xab\x0c\x8c\x5b\xcb\x6f\x27\xb1\xe8\xb7\xb3\x58\xe3\xf6\xe4\x65\xe1\xb7\x19\xe6\x7b\x26\x54\x33" +
		"\xe0\x5e\xab\x0f\x4e\x67\x5b\xec\x58\xf9\x20\xda\xf8\x70\x7d\x58\x1b\x5d\xff\x46\x87\x7c\x7d\x4e\xd7\x4b\x60\x93" +
		"\xaf\x5a\xd7\x99\x4f\x1f\xef\xf2\xd5\x42\x8a\x18\xe3\x3a\x58\x11\xef\x26\xb3\x10\xb7\xeb\x0c\x14\x46\xeb\x37\xc4" +
		"\x33\xc3\x9e\xd6\x8b\x20\xed\xcf\x56\xf5\x43\xd5\xd9\x86\xeb\x9d\xd7\x32\x8b\x70\xdc\x3c\xec\xb5\x48\x0e\x3e\x95" +
		"\xff\x06\x00\x00\xff\xff\x8d\x25\x0e\xdf\x36\x09\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        2358,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556228574, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": bindataGraphiqlhtml,
	"schema.gql":    bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"graphiql.html": {Func: bindataGraphiqlhtml, Children: map[string]*bintree{}},
	"schema.gql":    {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
