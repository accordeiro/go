// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.gql

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x82\xbd\x24\x17\x1f\x8a\x9e" +
		"\x84\xb6\x80\x9d\xb4\xa8\xd1\xdd\x45\x1b\x3b\x45\x81\xa0\x28\xc6\xe2\x48\x22\xc2\x0f\x65\x48\xda\x31\x8a\xfc\xf7" +
		"\x82\x94\xed\x50\x96\xeb\x9e\x7b\x12\xe7\xe3\x8d\x66\x1e\xdf\xd0\xd5\x1d\x69\x84\xbf\xcb\xe2\x35\x10\xef\x2b\x28" +
		"\x7e\x8b\xdf\xf2\xbd\x2c\xfd\xbe\x27\x48\x56\x0c\x7f\x02\x26\xcf\x92\xb6\x04\xa8\x14\x6c\x51\x49\x81\x9e\x04\xa0" +
		"\x73\xe4\x1d\x58\x03\xbe\x23\x58\x79\x52\x0a\x19\x0c\xf9\x9d\xe5\x97\x59\x59\x0c\xf1\x0a\x9e\xe7\xf1\xf0\xe7\x4d" +
		"\x79\xa5\x96\x74\x2e\x10\x5f\x29\x76\x48\xa8\xe0\x79\x99\x4e\xe7\xe5\x3c\xa3\x20\x70\x1e\xbd\x83\x86\xad\x4e\x65" +
		"\x14\x3a\x0f\xdf\x99\xa0\x7f\xb6\x81\xdd\xbc\xb5\x3f\x40\x17\x4f\x11\x79\x2b\xa8\xc1\xa0\x3c\x7c\x0f\xdf\x7c\x3b" +
		"\xb8\xef\x66\x60\x7b\x2f\xad\x41\xa5\xf6\xd0\xb3\xdd\x4a\x41\x50\xdb\x60\x3c\x31\xa0\x11\x11\xb7\x41\x47\xc3\xe8" +
		"\x20\x4d\x63\xa1\xb1\x0c\x8d\x54\x9e\x58\x9a\x76\x56\x16\x1a\xf9\x85\xbc\xbb\x2d\x8b\x22\xa6\xa6\xd9\xef\xad\xa0" +
		"\x0a\x56\x3e\xa6\xe4\xfe\x61\x94\x2c\x72\xf8\xd7\x25\x50\x1e\x9a\xe0\xb2\x11\x2b\x58\x1a\x5f\x16\x77\x15\x3c\x7f" +
		"\x49\xad\x4c\x88\x6f\x5b\xa6\x36\xb1\x3e\x22\xcd\xf2\xbf\x70\x16\xd1\x89\x9f\x8b\xf4\x44\x8c\x41\x4d\x60\x9b\x74" +
		"\x1e\x6a\xf6\x28\x19\x6e\x69\x16\x19\xf9\x04\x7f\x7c\xfe\xf2\xd7\x62\x7d\x7f\x37\x26\x0b\x98\x5c\x50\xde\xcd\xca" +
		"\xc2\xcb\xfa\x85\x38\x72\x16\x81\x5f\x51\xd3\x7f\x0e\x37\x3f\x8d\x71\x1a\xf3\xbd\x2c\x5d\x8d\x51\x37\x6b\xa9\xe9" +
		"\x78\x5e\xc8\x36\x82\x06\x55\x27\xfa\xa2\xaa\xeb\x8c\xdd\x9b\xa3\xbc\xe6\x75\x62\x39\xf3\x47\x50\x66\x9a\xa0\x0f" +
		"\x39\x2e\xb5\x72\x53\x16\x18\x7c\xf7\x48\xaf\x41\x32\x89\x0a\x16\xd6\x2a\x42\x73\xf2\x6f\x6d\x8d\x1b\x45\xa3\x80" +
		"\x1e\xfe\xf1\x93\xb2\x98\x0a\x0c\x97\x6d\x3c\x5b\xa5\x48\x2c\xf6\x0f\x56\xa3\x34\x23\x88\xa9\x3b\x3b\x55\xc5\x38" +
		"\xb2\x1e\xb7\x2a\x5d\xf2\xce\x53\xc2\xb8\x35\x21\x5d\xaf\x70\xff\x40\xb5\xd4\xa8\x5c\x75\xa0\x28\xce\x97\x31\x1f" +
		"\x13\xc9\xd5\x99\x59\x5b\x23\x64\x14\x80\xcb\x9c\x8d\x7c\x23\xf1\x35\xe8\x4d\x14\xe4\xa9\x90\xc6\xb7\x89\x4f\xba" +
		"\x27\xa3\xa4\x96\x7e\xdc\x0d\x93\x20\x9d\x74\xb5\x34\xce\x73\xa8\xcf\xff\x50\x5b\xa5\xd0\x13\xa3\x9a\x0b\xc1\xe4" +
		"\x1c\x5d\x8d\xae\x64\x6b\xd0\x07\x3e\xcb\x0a\x26\xea\x3f\xf7\x45\xdd\x07\x37\x11\xc1\xf2\xe1\x70\xb5\xc7\x97\x70" +
		"\xd0\x57\x14\x4d\xd2\xf6\xaf\x28\x39\x03\x5d\x5c\xf2\xdc\x3f\x5e\xd6\x63\x2f\x17\x96\xfc\x2c\x34\xc1\xc5\x8a\xbf" +
		"\x5b\x15\xe2\x15\x1d\xc5\x73\x00\x9c\xbb\x53\xa3\xf7\x83\xce\x06\xf2\x6d\x4f\xe6\x23\xae\xec\xee\xc3\xe8\x64\xdb" +
		"\x65\x15\x3b\x34\x6d\xfe\x07\x65\xdd\xb9\x19\xd7\xab\x4a\x4b\x16\x69\x94\xa6\x3e\x59\x47\xce\xce\xb7\xf3\x1a\x7b" +
		"\xff\x97\x99\x86\x0b\x89\x93\xf4\x61\xa3\x64\xfd\x0b\xed\xf3\xa7\x61\xbc\x3a\x81\x55\xfe\x8c\x58\xad\x9e\x1e\x3f" +
		"\xe7\x6b\x43\x82\x18\xa3\xd4\x57\xc4\xdb\xd1\x3d\xc7\x97\x63\xe2\xf4\x8c\xc6\x35\xc4\x93\xc0\x8e\x36\xf3\xe0\xbb" +
		"\x1f\x8d\xe8\xad\x1c\xbd\x5d\x82\x7a\xeb\xa4\x9f\x20\x2c\xb7\xeb\x9d\xf4\x3e\x77\xbe\x97\xff\x04\x00\x00\xff\xff" +
		"\xa5\x2c\x50\xb0\x10\x08\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        2064,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555765300, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.gql": bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.gql": {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
