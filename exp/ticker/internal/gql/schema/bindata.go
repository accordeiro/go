// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.gql

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x82\xbd\x24\x17\x1f\x8a\x9e" +
		"\x84\xb6\x80\x93\xb4\x68\xd0\xdd\x45\xbb\xc9\x16\x05\x82\xa2\x18\x8b\x23\x89\x08\x3f\xb4\x43\xd2\x5e\xa3\xc8\x7f" +
		"\x2f\x86\xb2\x1d\xca\x4a\xd3\x73\x4f\x22\x67\xe6\x0d\xf9\x9e\xde\x30\xb4\x03\x59\x84\xbf\xeb\xea\x4b\x22\xde\x37" +
		"\x50\xfd\x26\xdf\xfa\xb9\xae\xe3\x7e\x24\xc8\x3b\x49\xbf\x03\xa6\xc8\x9a\xb6\x04\x68\x0c\x6c\xd1\x68\x85\x91\x14" +
		"\x60\x08\x14\x03\x78\x07\x71\x20\xb8\x8f\x64\x0c\x32\x38\x8a\x3b\xcf\x4f\xab\xba\x9a\xf2\x0d\x3c\xae\x65\xf1\xe7" +
		"\x45\xfd\x46\x2f\x1d\x42\x22\x7e\xa3\xd9\xa1\xa0\x81\xc7\xbb\xbc\x3a\x6f\x17\x19\x15\x41\x88\x18\x03\x74\xec\x6d" +
		"\x6e\x63\x30\x44\xf8\xce\x25\xfb\xb3\x4f\x1c\xd6\xbd\xff\x01\x06\x59\x09\xf2\x52\x51\x87\xc9\x44\xf8\x1e\xbe\xf9" +
		"\x76\x0a\x5f\xad\xc0\x8f\x51\x7b\x87\xc6\xec\x61\x64\xbf\xd5\x8a\xa0\xf5\xc9\x45\x62\x40\xa7\x04\xb7\xc1\x40\x13" +
		"\x75\xd0\xae\xf3\xd0\x79\x86\x4e\x9b\x48\xac\x5d\xbf\xaa\x2b\x8b\xfc\x44\x31\x5c\xd6\x55\x25\xa5\x99\xfb\x8d\x57" +
		"\xd4\xc0\x7d\x94\x92\x32\x3e\x51\x29\x32\x87\xb3\x5e\x03\x95\xa9\x05\xae\xa0\xd8\xc0\x9d\x8b\x75\x75\xd5\xc0\xe3" +
		"\x87\x7c\x95\x85\xf0\x7d\xcf\xd4\x67\xd5\x67\xa2\x79\xfe\x17\xcd\x04\x9d\xf5\x79\x55\x1e\xc1\x38\xb4\x04\xbe\xcb" +
		"\xeb\xa9\xe7\x88\x9a\xe1\x92\x56\xa2\xc8\x3b\xf8\xe3\xfd\x87\xbf\xae\x1f\x6e\xae\xe6\x62\x01\x53\x48\x26\x86\x55" +
		"\x5d\x45\xdd\x3e\x11\x8b\x66\x02\xfc\x88\x96\xfe\x93\xdc\xfa\x44\xe3\x44\xf3\xb9\xae\x43\x8b\xe2\x9b\x07\x6d\xe9" +
		"\xb8\xbe\xd6\xbd\x80\x26\x57\x67\xf9\xc4\xd5\x6d\xa1\xee\xc5\xd1\x5e\xeb\x36\xab\x5c\xc4\x05\x54\x6c\x5d\xb2\x87" +
		"\x9a\x90\xaf\x72\x51\x57\x98\xe2\xf0\x89\xbe\x24\xcd\xa4\x1a\xb8\xf6\xde\x10\xba\x53\x7c\xeb\x5b\xdc\x18\x9a\x25" +
		"\xec\x74\xc6\x4f\xc6\x63\x6e\x30\xfd\x6c\x17\xd9\x1b\x43\xea\x7a\x7f\xeb\x2d\x6a\x37\x83\xb8\x76\xf0\x4b\x57\xcc" +
		"\x33\x0f\xf3\xab\xea\x90\xa3\xeb\x5c\x30\xbf\x9a\xd2\x61\x34\xb8\xbf\xa5\x56\x5b\x34\xa1\x39\x48\x24\xfc\x0a\xe5" +
		"\xa5\x90\x42\x5b\x6c\x5b\xef\x94\x16\x03\x84\x22\xd8\xe9\xaf\xa4\x3e\x26\xbb\x11\x43\x9e\x1a\x59\xfc\xba\x88\xe9" +
		"\xf0\xd9\x19\x6d\x75\x9c\xdf\x86\x49\x91\xcd\xbe\xba\x73\x21\x72\x6a\xcf\x4f\x68\xbd\x31\x18\x89\xd1\xac\x95\x62" +
		"\x0a\x81\xde\xcc\xde\xeb\xde\x61\x4c\x7c\x56\x95\x9c\xf8\xbf\x8c\x89\xef\x53\x58\x98\xe0\xee\xf6\xf0\x6b\x8f\x2f" +
		"\xe1\xe4\x2f\x31\xcd\xcb\xe0\x1e\x6b\xe6\x63\x79\x8a\x4a\xe1\xef\xde\x24\x51\xf3\xf8\x9f\x0f\x95\xe7\xe1\x3c\x2f" +
		"\x37\x93\x25\x26\xb0\x1f\xc9\xbd\xe4\x8d\xdf\xbd\x6c\x06\xdd\x0f\x45\xc7\x01\x5d\x5f\x9e\x60\x7c\x38\xdf\xca\x24" +
		"\x34\x79\x1e\x84\xb1\x76\xed\x69\x77\xa4\x77\x3e\x48\x42\x34\x5f\xea\x57\xd4\x5c\xa8\xf3\x7f\xe2\x34\x3d\x90\xc2" +
		"\x64\x4c\x1b\xa3\xdb\x5f\x68\x5f\x4e\xf1\xdc\xe5\x89\x4d\x39\xf1\xde\x9a\xcf\x9f\xde\x97\x0e\x27\x45\x8c\xe2\xca" +
		"\x7b\xe2\x2d\x95\x9a\xc8\x90\x2f\x82\x91\xd1\x85\x8e\x78\x91\xd8\xd1\x66\x9d\xe2\xf0\xa3\x53\xa3\xd7\xb3\x67\x46" +
		"\xd1\xe8\x83\x8e\x0b\x84\xe7\xfe\x61\xa7\x63\x2c\x83\xcf\xf5\x3f\x01\x00\x00\xff\xff\x6d\x7c\x98\x46\xbb\x07\x00" +
		"\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        1979,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555700420, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.gql": bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.gql": {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
