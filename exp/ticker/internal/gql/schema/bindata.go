// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.gql

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4f\x6f\x13\x3f\x10\x3d\xaf\x3f\xc5\x54\xbf\x4b\x7b\xc9\xe1\x27" +
	"\x4e\x2b\x40\x4a\x5b\x21\x22\xd1\x0a\x68\x41\x48\x15\x42\x53\x7b\x76\xd7\xaa\xff\xa4\xfe\x93\x36\x42\xfd\xee\x68" +
	"\xbc\x49\xea\x4d\x0a\x9c\x39\x65\xe7\xcd\xbc\xf1\xcc\xf3\x73\xa2\x1c\xc8\x22\xfc\x14\xcd\x7d\xa6\xb0\x6e\xa1\xf9" +
	"\xc4\xbf\xe2\x49\x88\xb4\x5e\x12\x94\x88\xd3\xff\x41\xa0\x14\x34\xad\x08\xd0\x18\x58\xa1\xd1\x0a\x13\x29\xc0\x18" +
	"\x29\x45\xf0\x0e\xd2\x40\x70\x95\xc8\x18\x0c\xe0\x28\x3d\xf8\x70\x37\x13\xcd\x98\x6f\xe1\x66\xce\x1f\xdf\x8f\xc4" +
	"\xa4\x57\x0a\xa8\x08\x62\xc2\x14\xa1\x0b\xde\x96\x26\x06\x63\x82\xd7\x2e\xdb\xf7\x3e\x87\x38\xef\xfd\x5b\x18\xf8" +
	"\x8b\x99\xc7\x8a\x3a\xcc\x26\xc1\x1b\xf8\xff\xd5\x08\x9f\xcc\xc0\x2f\x93\xf6\x0e\x8d\x59\xc3\x32\xf8\x95\x56\x04" +
	"\xd2\x67\x97\x28\x00\x3a\xc5\xbc\x5b\x8c\x34\xce\x0a\xda\x75\x1e\x3a\x1f\xa0\xd3\x26\x51\xd0\xae\x9f\x09\xd1\x58" +
	"\x0c\x77\x94\xe2\xb1\x68\x1a\xae\x2d\xd3\x9e\x79\x45\x2d\x5c\x25\xae\xa9\xf1\x45\x8c\x99\x42\x95\xd9\x1c\xf6\x12" +
	"\xa9\x4e\x1d\xf0\xaa\x1d\x5b\x58\xb8\x24\x9a\x93\x16\x6e\x2e\xca\x28\xfb\x52\x61\xdf\x07\xea\x8b\xe6\x13\xd5\x7c" +
	"\xf8\x8d\x68\xcc\x2e\x02\xbd\xa8\x0f\x73\x1c\x5a\x02\xdf\x95\xef\xb1\xe7\x12\x75\x80\x63\x9a\xf5\x33\x66\x7f\xfb" +
	"\x70\xf1\xe3\xf4\xfa\xec\x64\xaa\x16\x04\x8a\xd9\xa4\x38\x13\x4d\xd2\xf2\x8e\x02\x6b\xc6\xc4\x4b\xb4\xf4\xd7\xe5" +
	"\xe6\xbb\x35\x76\x6b\x3e\x09\x11\x25\xb2\x6d\xae\xb5\xa5\x8d\xf3\x8a\x60\xec\x3c\x59\xe9\x79\x24\x1a\x5d\x34\x9c" +
	"\xcb\xa2\x6b\x85\x33\xa9\x0a\x5d\xb6\x9b\x9a\x58\x0e\x3f\x12\x0d\xe6\x34\x7c\xa6\xfb\xac\x03\xa9\x16\x4e\xbd\x37" +
	"\x84\x6e\x87\xaf\xbc\xc4\x5b\x43\x93\x84\x1d\xcf\x78\x67\x3c\x96\x06\xe3\xf5\xba\x14\xbc\x31\xa4\x4e\xd7\xe7\xde" +
	"\xa2\x76\x13\x8a\x93\x83\x3f\xf4\xc1\x34\x73\x3d\x1d\x55\xc7\x82\xce\x4b\xc1\x74\x34\xa5\xe3\xd2\xe0\xfa\x9c\xa4" +
	"\xb6\x68\x76\x9b\xb8\x4a\x68\xae\xa2\x28\xab\x50\x7a\xa7\x34\xdf\x77\xac\xc0\x4e\x3f\x92\xba\xcc\xf6\x96\xfd\x37" +
	"\x76\xb1\xf8\x38\x05\x74\xfc\xe2\x8c\xb6\x3a\x4d\x87\x08\xa4\xc8\x16\x03\x2d\x5c\x4c\x21\xcb\xfd\xde\xd2\x1b\x83" +
	"\x89\x02\x9a\xb9\x52\x81\x62\xa4\x3f\x66\xaf\x74\xef\x30\xe5\xb0\x57\x95\x1d\x1b\xbd\xc6\xd8\xe0\x39\x1e\xdc\xfd" +
	"\xe2\x7c\x33\xf0\xf6\x4f\x6a\x34\x12\x7b\xe5\xf9\x85\x6e\x6b\xa6\xef\x6f\x87\x72\xe1\x57\x6f\x32\xeb\xb8\xbd\xde" +
	"\x4d\xe5\x3e\x5c\x1e\xc6\xd9\xe8\x84\x91\xec\x97\xe4\x9e\xf3\xc6\x3f\x3c\x07\x83\xee\x87\xaa\xe3\x80\xae\xaf\x4f" +
	"\x30\x3e\xee\x87\x6c\xf9\xb6\x18\x9f\x37\xd6\x4e\xee\xa2\xed\x7a\xfb\x2f\x86\x17\x2d\x43\x7d\x44\x1d\x2a\x75\xfe" +
	"\x8d\x9d\x7e\x05\x00\x00\xff\xff\x60\xe9\x33\x1c\x72\x06\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}



func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schema.gql",
		size: 1650,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555695955, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.gql": bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.gql": {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
