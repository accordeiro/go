// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.gql

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x62\x82\x5c\x92\x8b\x0f\x8b\x3d" +
		"\x09\xbb\x0b\x38\xc9\x2e\xd6\x68\x12\xb4\xb1\x53\x14\x08\x8a\x62\x2c\x8e\x24\x22\xfc\x50\x86\xa4\x1d\xa3\xc8\x7f" +
		"\x2f\x48\xd9\x0e\x65\xa7\xe9\xb9\x27\x91\x6f\x3e\xc8\xf7\xf8\x46\xae\xee\x48\x23\x7c\x2f\x8b\xa7\x40\xbc\xa9\xa0" +
		"\xf8\x14\xbf\xe5\x4b\x59\xfa\x4d\x4f\x90\x76\x31\x7c\x0a\x4c\x9e\x25\xad\x08\x50\x29\x58\xa1\x92\x02\x3d\x09\x40" +
		"\xe7\xc8\x3b\xb0\x06\x7c\x47\x30\xf7\xa4\x14\x32\x18\xf2\x6b\xcb\x8f\x93\xb2\x18\xe2\x15\x3c\x4c\xe3\xe2\xeb\x49" +
		"\xf9\x4e\x2f\xe9\x5c\x20\x7e\xa7\xd9\x36\xa1\x82\x87\x59\x5a\x1d\xb6\xf3\x8c\x82\xc0\x79\xf4\x0e\x1a\xb6\x3a\xb5" +
		"\x51\xe8\x3c\xfc\x65\x82\xfe\xdf\x06\x76\xd3\xd6\xfe\x03\x5d\x5c\xc5\xca\x33\x41\x0d\x06\xe5\xe1\x6f\xf8\xe3\xcf" +
		"\x01\x3e\x9f\x80\xed\xbd\xb4\x06\x95\xda\x40\xcf\x76\x25\x05\x41\x6d\x83\xf1\xc4\x80\x46\xc4\xba\x25\x3a\x1a\xa8" +
		"\x83\x34\x8d\x85\xc6\x32\x34\x52\x79\x62\x69\xda\x49\x59\x68\xe4\x47\xf2\xee\xac\x2c\x8a\x98\x9a\xb8\x5f\x5a\x41" +
		"\x15\xcc\x7d\x4c\xc9\xf1\x81\x4a\x16\xd9\x9e\xf5\x56\x51\x1e\x3a\xaa\xcb\x28\x56\x30\x33\xbe\x2c\xce\x2b\x78\xb8" +
		"\x49\x57\x39\x12\xbe\x6d\x99\xda\xa4\xfa\x48\x34\xcb\x3f\xd1\x2c\x56\x27\x7d\xde\x94\x27\xd6\x18\xd4\x04\xb6\x49" +
		"\xeb\xa1\x67\x8f\x92\xe1\x8c\x26\x51\x91\x53\xf8\x72\x7d\xf3\xed\x62\x71\x79\x3e\x16\x0b\x98\x5c\x50\xde\x4d\xca" +
		"\xc2\xcb\xfa\x91\x38\x6a\x16\x0b\x6f\x51\xd3\x2f\xc9\x4d\xf7\x34\xf6\x34\x5f\xca\xd2\xd5\x18\x7d\xb3\x90\x9a\xb6" +
		"\x3e\x4e\x82\x45\x1f\xd7\x99\x9e\x27\x3b\x43\x4d\xeb\xa4\x6b\x86\xc7\xa2\x6c\x6b\x82\xde\xe6\xb8\x74\xf8\x49\x59" +
		"\x60\xf0\xdd\x1d\x3d\x05\xc9\x24\x2a\xb8\xb0\x56\x11\x9a\x3d\xbe\xb2\x35\x2e\x15\x8d\x02\x7a\x38\xe3\x3f\x65\x31" +
		"\x35\x18\x9e\xd7\x78\xb6\x4a\x91\xb8\xd8\x5c\x59\x8d\xd2\x8c\x4a\x4c\xdd\xd9\x63\x1f\x8c\x23\x8b\xf1\x55\xa5\x4b" +
		"\xe8\x34\x25\x8c\xaf\x26\xa4\xeb\x15\x6e\xae\xa8\x96\x1a\xd5\x9e\x89\xc9\x84\x8e\x59\xe4\xea\x6c\x5b\x5b\x23\x64" +
		"\x7c\x6f\x97\x81\x8d\x7c\x26\x71\x1b\xf4\x32\xfa\x6f\xe8\xa2\xf1\x79\x0c\x48\x77\x6f\x94\xd4\xd2\x8f\x2f\xc1\x24" +
		"\x48\x27\x03\xcd\x8c\xf3\x1c\xea\xc3\xde\xb5\x55\x0a\x3d\x31\xaa\xa9\x10\x4c\xce\xd1\xbb\xd1\xb9\x6c\x0d\xfa\xc0" +
		"\x07\x59\xc1\x44\xa3\xe7\x58\x34\x78\x70\x47\x6f\x3f\xbb\xda\x5e\x78\xf7\xcb\x1b\x8c\x14\xbd\xf2\x3a\xa1\xbb\x9c" +
		"\xf1\xfc\xed\xd1\x98\xf8\xd9\xaa\x10\x75\xdc\x3d\xef\x36\xf3\x10\x4e\x83\x71\x39\x38\x61\x28\xb6\x3d\x99\xd7\xb8" +
		"\xb2\xeb\xd7\x4d\x27\xdb\x2e\xeb\xd8\xa1\x69\xf3\x13\x94\x75\x87\xdb\x68\xf9\x2a\x19\x3f\x32\x96\xa6\xde\xef\x76" +
		"\xf4\x0e\x27\x26\x12\x4d\x97\xfa\x88\x92\x33\x75\x7e\x27\x4e\xc3\x9f\x30\x32\xe9\xc3\x52\xc9\xfa\x03\x6d\xf2\xe1" +
		"\x1d\xfb\x3b\xb0\xca\x07\xdd\x6a\x75\x7f\x77\x9d\x7b\x9b\x04\x31\x46\x57\xce\x89\x57\x94\x6b\x12\x67\xfb\x08\xf4" +
		"\x8c\xc6\x35\xc4\x47\x81\x35\x2d\xa7\xc1\x77\xff\x1a\xd1\x5b\x39\xfa\xbb\x08\xea\xad\x93\xfe\xa8\xc2\x72\xbb\x58" +
		"\x4b\xef\x73\xf0\xa5\xfc\x11\x00\x00\xff\xff\x4f\x74\x9a\x18\xa4\x07\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        1956,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555696634, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.gql": bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.gql": {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
