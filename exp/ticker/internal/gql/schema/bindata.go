// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.gql
// types/asset.gql
// types/market.gql
// types/query.gql
// types/scalar.gql

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\xe2\x2c\x2c\x4d\x2d\xaa\xb4\x52\xe0" +
	"\x0c\x04\xd1\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x5d\xac\xd9\x78\x1a\x00\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}



func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schema.gql",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555618513, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTypesAssetgql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6e\xea\x40\x0c\x86\xd7\xe4\x14\xe1\x1a\xec\xc2\x43\x4f\x62" +
	"\xd3\x45\x69\x0f\x60\x66\x5c\xb0\x34\x63\xa7\xb6\xa7\x22\xaa\x7a\xf7\x2a\x81\xa2\x19\x2a\x75\xe9\xcf\xbf\xff\x7c" +
	"\xd1\xf8\x34\x62\x3f\x98\xa1\xf7\x9f\xdd\x2a\x48\xc4\x4d\x7f\x70\x25\x3e\xad\xbb\x15\x99\x15\xd4\x21\x04\x29\xec" +
	"\x15\x9f\x8f\xaa\x91\x4b\xbe\x65\x6c\xd3\xef\xd9\xd7\xdd\x0a\x8a\x9f\x9f\xf1\xbd\x90\x62\xdc\xf4\x5b\x91\x84\xc0" +
	"\x77\xfe\x21\x01\x8e\x09\x9b\x45\xbe\x7e\xe3\x7f\x12\x58\x0a\x66\xa5\x7f\xc2\xae\x92\x12\xc6\xed\xb4\x93\x0c\xc4" +
	"\xcd\x09\x87\xb3\xe8\x70\x0d\x36\xde\xd5\xe6\xa5\x55\x25\x5b\xe8\xb0\x04\x5a\xb5\x48\x36\x26\x98\x76\x18\x28\x43" +
	"\xba\xff\x09\x43\xae\x0b\x22\x5a\xa8\xc6\x20\x1c\xc9\x49\xd8\x2a\xf8\x46\x17\x8c\x4f\x25\x1f\x51\x7f\x5a\x32\x5c" +
	"\x5a\x40\xf6\xca\x89\x32\x79\x2b\xa1\x18\x31\x8f\x73\xe1\x9e\xcd\xb5\x84\xc7\xee\x20\x29\x81\xa3\x42\x1a\x62\x54" +
	"\x34\xc3\x3f\xb7\x07\x3a\x31\x78\xd1\x87\x54\x61\x57\x6a\x98\x39\x78\xb1\x5f\x6f\xbf\xdf\xdd\x84\xbf\xba\xef\x00" +
	"\x00\x00\xff\xff\x5e\x36\xbc\x6f\x2a\x02\x00\x00")

func bindataTypesAssetgqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTypesAssetgql,
		"types/asset.gql",
	)
}



func bindataTypesAssetgql() (*asset, error) {
	bytes, err := bindataTypesAssetgqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "types/asset.gql",
		size: 554,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555622807, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTypesMarketgql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x8f\xc1\xca\xc2\x30\x10\x84\xcf\xcd\x53\xe4\x7f\x8d\xdc\xca\x2f\x42" +
	"\x0f\x82\xa0\x78\x5f\xdb\x25\x0d\xa6\xbb\x65\x77\x8b\x88\xf8\xee\x92\x7a\x68\xed\x1b\x78\x09\x99\x6f\x86\x4c\xc6" +
	"\x1e\x23\xfa\x03\xc8\x0d\xcd\x3f\x5d\x75\x05\xc5\x5a\x15\xad\xd9\x05\x3f\x5f\xfe\x5c\xd5\xf2\x44\x86\xb2\xe5\x9f" +
	"\xf4\x85\xf3\x34\x60\xf0\xfb\xcc\xb0\x0a\x6f\xb1\x09\x74\xf8\x5f\xbc\xe0\x1b\x2a\x84\x47\xa4\xc5\xcf\x7c\x5f\x44" +
	"\x9f\x62\xbf\x7a\xb1\x07\x8a\xeb\x86\xcc\xba\x95\xe7\x54\xca\xca\xa9\x06\xc3\xe8\x2a\x4d\xd4\x7e\x91\x97\x73\xf3" +
	"\xd6\x3a\x46\xc1\x08\x86\xdd\xb2\x7a\xfe\xdc\x11\x92\x04\x7f\x32\x49\x14\x7f\x6f\xdc\x3b\x00\x00\xff\xff\xdf\x4e" +
	"\x3a\x48\xc8\x01\x00\x00")

func bindataTypesMarketgqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTypesMarketgql,
		"types/market.gql",
	)
}



func bindataTypesMarketgql() (*asset, error) {
	bytes, err := bindataTypesMarketgqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "types/market.gql",
		size: 456,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555623783, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTypesQuerygql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\xab\xdb\x30\x10\x84\xcf\xd2\xaf\x98\x92\x8b\x03\xc5\x87\xd2" +
	"\x93\x69\x0b\x69\x2e\x0d\x34\x85\x92\x1e\x0a\xa1\x94\x6d\xbc\x76\x44\x64\xc9\xac\xd6\x29\xa1\xf4\xbf\x3f\x64\x3f" +
	"\x82\xf3\x5e\x72\x5b\xb4\x3b\xa3\x99\x4f\x2f\x3d\xe3\xfb\xc0\x72\xc1\x3f\x6b\x16\x10\x56\x71\x7c\x66\x90\xf7\x38" +
	"\x93\x77\x35\x29\xd7\xa0\x94\x58\x13\x62\x80\x1e\x19\x3b\x65\xef\x49\x10\x58\xff\x46\x39\x95\xd6\x4c\xfb\x0a\xfb" +
	"\x55\x1e\x7e\xbd\xb1\x37\x5e\x2a\x54\x33\x92\x92\x26\x34\x12\xbb\xd1\xc4\x53\x52\x7c\x08\x43\xf7\x25\x0e\x92\x56" +
	"\x6d\xfc\x84\x63\x9e\xb2\xb2\xa8\xb9\xa1\xc1\x2b\x3e\xe2\xdd\xfb\xe9\x79\x59\x22\xf6\xea\x62\x20\xef\x2f\xe8\x25" +
	"\x9e\x5d\xcd\x38\xc4\x21\x28\x0b\x28\xd4\x59\xf7\x87\x12\x4f\x59\xe1\x42\x13\xd1\x44\x41\xe3\xbc\xb2\xb8\xd0\x96" +
	"\xd6\x74\x24\x27\xd6\x54\x58\x63\xf2\xe9\x18\x76\x1d\x6b\xae\xb0\xd3\x7c\x32\x7f\xdf\xa4\x34\xb0\xcc\x36\xcf\x7f" +
	"\xdd\x13\xcd\x57\xaf\x74\xb3\x8a\x15\x36\x61\x2a\x65\xcd\xb2\xc2\x7e\x3b\xe6\x79\x89\x8b\xda\x56\xb8\x1d\xb9\xdf" +
	"\x90\x8b\xf2\x00\x5c\x56\x8f\x90\xee\x32\xca\x9a\x40\x1d\x23\x36\xe3\x3c\x79\xf6\xe4\x04\x05\x97\x19\xcb\x02\x3f" +
	"\xbf\x6e\x7f\x7f\xfe\xb1\x5e\xde\x12\x83\x70\x1a\xbc\xa6\xd2\x1a\x75\x87\x13\x4b\xf1\xa8\xce\x5b\x6b\x4c\x76\xfc" +
	"\x46\xdd\x8c\x4b\xae\xb8\xba\x96\xb9\x96\xfd\x6f\x9f\x02\x00\x00\xff\xff\xec\x9a\x9a\x1f\x76\x02\x00\x00")

func bindataTypesQuerygqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTypesQuerygql,
		"types/query.gql",
	)
}



func bindataTypesQuerygql() (*asset, error) {
	bytes, err := bindataTypesQuerygqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "types/query.gql",
		size: 630,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555618489, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTypesScalargql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xe0\x02" +
	"\x04\x00\x00\xff\xff\x2f\xe8\xe9\x71\x11\x00\x00\x00")

func bindataTypesScalargqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTypesScalargql,
		"types/scalar.gql",
	)
}



func bindataTypesScalargql() (*asset, error) {
	bytes, err := bindataTypesScalargqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "types/scalar.gql",
		size: 17,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1555618509, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.gql":       bindataSchemagql,
	"types/asset.gql":  bindataTypesAssetgql,
	"types/market.gql": bindataTypesMarketgql,
	"types/query.gql":  bindataTypesQuerygql,
	"types/scalar.gql": bindataTypesScalargql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.gql": {Func: bindataSchemagql, Children: map[string]*bintree{}},
	"types": {Func: nil, Children: map[string]*bintree{
		"asset.gql": {Func: bindataTypesAssetgql, Children: map[string]*bintree{}},
		"market.gql": {Func: bindataTypesMarketgql, Children: map[string]*bintree{}},
		"query.gql": {Func: bindataTypesQuerygql, Children: map[string]*bintree{}},
		"scalar.gql": {Func: bindataTypesScalargql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
